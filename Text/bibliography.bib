@article{avl_tree,
  author       = {Adelson-Velskii, G. M. and Landis, E. M.},
  fjournal     = {Doklady Akademii Nauk SSSR},
  issn         = {0002-3264},
  journal = {Dokl. Akad. Nauk SSSR},
  mrclass      = {94.20},
  mrnumber     = {0156719},
  pages        = {263--266},
  title        = {An algorithm for organization of information},
  volume       = {146},
  year         = {1962},
}

@article{knott,
author = {Knott, G. D.},
doi = {10.1093/comjnl/18.3.265},
file = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Knott - Hashing Functions.pdf:pdf},
issn = {0010-4620},
journal = {The Computer Journal},
mendeley-groups = {Thesis},
number = {3},
pages = {265--278},
title = {{Hashing functions}},
url = {http://comjnl.oxfordjournals.org/content/18/3/265.short?rss=1{\&}ssource=mfr},
volume = {18},
year = {1975}
}


@book{cormen,
  author    = {Cormen, Thomas H. and Leiserson, Charles E. and Rivest, Ronald L. and Stein, Clifford},
  edition   = {3rd},
  isbn      = {9780262033848},
  publisher = {The MIT Press},
  title     = {Introduction to Algorithms, Third Edition},
  year      = {2009},
}

@book{knuth3,
 author = {Knuth, Donald E.},
 title = {The Art of Computer Programming,  Volume 3: (2Nd Ed.) Sorting and Searching},
 year = {1998},
 isbn = {0-201-89685-0},
 publisher = {Addison Wesley Longman Publishing Co., Inc.},
 address = {Redwood City, CA, USA},
}

@article{champ,
  author   = {Tamir, Orr and Morrison, Adam and Rinetzky, Noam},
  doi      = {10.4230/LIPIcs.OPODIS.2015.186},
  file     = {:home/metopa/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Tamir, Morrison, Rinetzky - Unknown - A Heap-Based Concurrent Priority Queue with Mutable Priorities for Faster Parallel Algorithms.pdf:pdf},
  keywords = {4230,and phrases priority queues,changekey,concurrent data structures,digital object identifier 10,dijkstra,lipics,p,s,single-source shortest path algorithm,xxx,yyy},
  pages    = {1--16},
  title    = {{A Heap-Based Concurrent Priority Queue with Mutable Priorities for Faster Parallel Algorithms}},
  url      = {http://www.cs.tau.ac.il/{~}mad/publications/opodis2015-heap.pdf},
  volume   = {i},
}

@book{sedgewick,
  author    = {Sedgewick, Robert and Wayne, Kevin},
  edition   = {4},
  file      = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Sedgewick, Wayne - Algorithms, 4th edition.pdf:pdf},
  isbn      = {9780321573513},
  publisher = {Addison-Wesley},
  title     = {{Algorithms}},
  year      = {2011},
}

@article{lfu,
  author = {Shah, Prof Ketan},
  file   = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Shah, Mitra, Matani - An O(1) algorithm for implementing the LFU cache eviction scheme.pdf:pdf},
  number = {1},
  pages  = {1--8},
  title  = {{An (1) algorithm for implementing the LFU cache eviction scheme}},
  url    = {http://dhruvbird.com/lfu.pdf},
  year   = {2010},
}

@article{concurrent_heap1,
  author       = {Hunt, Galen C. and Michael, Maged M. and Parthasarathy, Srinivasan and Scott, Michael L.},
  file         = {:home/metopa/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Hunt et al. - 1996 - An Efficient Algorithm for Concurrent Priority Queue Heaps.pdf:pdf},
  journal = {Information Processing Letters},
  pages        = {151--157},
  title        = {{An Efficient Algorithm for Concurrent Priority Queue Heaps}},
  url          = {http://www.research.ibm.com/people/m/michael/ipl-1996.pdf},
  volume       = {60},
  year         = {1996},
}

@misc{boost,
  author  = {Boost},
  title   = {{Boost C++ Libraries}},
  url     = {http://www.boost.org/},
  urldate = {2017-05-03},
  year    = {2017},
}

@thesis{cb_tree,
  author      = {Korenfeld, Boris},
  file        = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Korenfeld - CBTree$\backslash$: A Practical Concurrent Self-Adjusting Search Tree.pdf:pdf},
  institution = {Tel Aviv University},
  title       = {{CBTree: A practical concurrent self-adjusting search tree}},
  type        = {phdthesis},
  url         = {http://link.springer.com/chapter/10.1007/978-3-642-33651-5{\_}1},
  year        = {2012},
}

@misc{ccherish,
  author = {Mašat, Miroslav},
  title  = {{CCherish}},
  url    = {https://github.com/tyrhus/CCherish},
  year   = {2016},
}

@misc{complete_bt,
  author    = {Black, Paul E.},
  booktitle = {Dictionary of Algorithms and Data Structures [online]},
  title     = {complete binary tree},
  url       = {https://xlinux.nist.gov/dads/HTML/completeBinaryTree.html},
  year      = {2016},
}

@article{crtp,
  abstract     = {The curiously recurring template pattern (CRTP) is a C++ idiom in which a class X derives from a class template instantiation using X itself as template argument.[1] The name of this idiom was coined by Jim Coplien,[2] who had observed it in some of the earliest C++ template code as well as in code examples that Timothy Budd created in his multiparadigm language, Leda.[3]},
  author       = {Coplien, J},
  file         = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/James O. Coplien. "Curiously Recurring Template Patterns".pdf:pdf},
  isbn         = {0201533936},
  issn         = {1040-6042},
  journal = {C++ Report},
  number       = {February},
  pages        = {24--27},
  title        = {{Curiously Recurring Template Patterns}},
  year         = {1995},
}

@misc{std_hash,
  author  = {{Free Software Foundation}, Inc.},
  title   = {libstdc++: functional{\_}hash.h},
  url     = {https://gcc.gnu.org/onlinedocs/gcc-6.2.0/libstdc++/api/a01298{\_}source.html},
  urldate = {2017-05-03},
}

@misc{murmurhash,
  author = {Appleby, Austin},
  title  = {{MurmurHash}},
  url    = {https://github.com/aappleby/smhasher},
}

@thesis{masat,
  abstract      = {The objective of this thesis is to conduct a study and implement the numerical database system using a weighted binary tree data structure. The implement- ation in the language C++ will be compared to the original implementation in Fortran programming language. The portion of this thesis is dedicated to the analysis of the current solution, its parameters, and discussion of imple- menting the parallel variant of the algorithm.},
  author        = {Mašat, Miroslav},
  file          = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Miroslav Masat - Numerical Database System.pdf:pdf},
  institution   = {Czech Technical University in Prague},
  keywords      = {C++,balanced binary search tree,binary tree,database system,implementation of the database system,numerical system,parallel execution of an algorithm,search in the tree structure,weighted tree},
  mendeley-tags = {C++,balanced binary search tree,binary tree,database system,implementation of the database system,numerical system,parallel execution of an algorithm,search in the tree structure,weighted tree},
  title         = {{Numerical Database System}},
  type          = {phdthesis},
  url           = {https://dspace.cvut.cz/bitstream/handle/10467/65871/F8-BP-2016-Masat-Miroslav-thesis.pdf https://dspace.cvut.cz/handle/10467/65871},
  year          = {2016},
}

@article{park94,
  abstract     = {An on-line numerical database system, that is based on the concept of a weighted search tree and which functions like a file directory, is introduced. The system, which is designed to aid in reducing time-consuming redundant calculations in numerically intensive computations, can be used to fetch, insert and delete items from a dynamically generated list in optimal [O(log n) where n is the number of items in the list] time. Items in the list are ordered according to a priority queue with the initial priority for each element set either automatically or by an user supplied algorithm. The priority queue is updated on-the-fly to reflect element hit frequency. Items can be added to a database so long as there is space to accommodate them, and when there is not, the lowest priority element(s) is removed to make room for an incoming element(s) with higher priority. The system acts passively and therefore can be applied to any number of databases, with the same or different structures, within a single application. ?? 1994.},
  author       = {Park, S. C. and Bahri, C. and Draayer, J. P. and Zheng, S. Q.},
  doi          = {10.1016/0010-4655(94)90172-4},
  file         = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Park, Bahri, Draayer, Zheng - Numerical Database System Based on a Weighted Search Tree.pdf:pdf},
  issn         = {00104655},
  journal = {Computer Physics Communications},
  keywords     = {avl tree,binary tree,heap,weighted search tree},
  number       = {2-3},
  pages        = {247--264},
  title        = {{Numerical database system based on a weighted search tree}},
  volume       = {82},
  year         = {1994},
}

@article{partial_splaying,
  abstract     = {Abstract Self-adjusting trees are data structures that modify their own structure to reflect the probabilistic nature of access patterns. The splay tree of Tarjan and Sleator performs tree operations in amortized O(log n) time. The splay operation moves an accessed node all the way to the root of the tree, and thus may not be the most efficient type of self-adjustment. In this paper several variations of the splay tree are described. Simulations are used to compare the optimality of the searches done by these trees for various patterns of data access.},
  author       = {Klostermeyer, William F},
  doi          = {10.1080/02522667.1992.10699094},
  issn         = {0252-2667},
  journal = {J. Information and Optimization Sciences},
  month        = {jan},
  number       = {1},
  pages        = {85--95},
  publisher    = {Taylor {\&} Francis Group},
  title        = {{Optimizing searching with self-adjusting trees}},
  url          = {http://www.tandfonline.com/doi/abs/10.1080/02522667.1992.10699094},
  volume       = {13},
  year         = {1992},
}

@misc{splay_overview,
  author = {Huus, Evan},
  file   = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Huus - Reduced Restructuring in Splay Tree.pdf:pdf},
  pages  = {1--15},
  title  = {{Reduced Restructuring in Splay Trees}},
  year   = {2014},
  url = {https://eapache.github.io/assets/Huus2014_SplayTrees.pdf},
  urldate = {2017-05-03},
}

@article{splay_tree,
  abstract     = {The splay tree, a self-adjusting form of binary search tree, is developed and analyzed. The binary search tree is a data structure for representing tables and lists so that accessing, inserting, and deleting items is easy. On an n-node splay tree, all the standard search tree operations have an amortized time bound of O(log n) per operation, where by amortized time is meant the time per operation averaged over a worst-case sequence of operations. Thus splay trees are as efficient as balanced trees when total running time is the measure of interest. In addition, for sufficiently long access sequences, splay trees are as efficient, to within a constant factor, as static optimum search trees. The efficiency of splay trees comes not from an explicit structural constraint, as with balanced trees, but from applying a simple restructuring heuristic, called splaying, whenever the tree is accessed. Extensions of splaying give simplified forms of two other data structures: lexicographic or multidimensional search trees and link/cut trees.},
  author       = {Sleator, Daniel Dominic and Tarjan, Robert Endre},
  doi          = {10.1145/3828.3835},
  file         = {:home/metopa/code/Projects/BP/NumericalDatabaseSystem/Research/Sleator, Tarjan - Self-Adjusting Binary Search Trees.pdf:pdf},
  issn         = {0004-5411},
  journal = {Journal of the ACM},
  number       = {3},
  pages        = {652--686},
  title        = {{Self-adjusting Binary Search Trees}},
  url          = {http://doi.acm.org/10.1145/3828.3835},
  volume       = {32},
  year         = {1985},
}

@misc{sizeof_empty,
  author  = {Stroustrup, Bjarne},
  title   = {{Stroustrup: C++ Style and Technique FAQ}},
  url     = {http://www.stroustrup.com/bs{\_}faq2.html{\#}sizeof-empty},
  urldate = {2017-05-03},
  year    = {2013},
}

@article{ebo,
  author       = {Myers, Nathan C.},
  journal = {Dr. Dobb's Journal},
  number       = {C++ Issue},
  title        = {{The "Empty Member" C++ Optimization}},
  url          = {http://www.cantrip.org/emptyopt.html},
  year         = {1997},
}

@article{park90,
  author       = {Park, S. C. and Draayer, J. P. and Zheng, S. Q.},
  file         = {:home/metopa/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Park, Draayer - Unknown - Time-Space Optimal Numerical Database for Large-Scale Scientific Applications.pdf:pdf},
  journal = {Proc. Int. Computer Symposium},
  pages        = {333--338},
  title        = {{Time-Space Optimal Numerical Database for Large-Scale Scientific Applications}},
  url          = {http://www.phys.lsu.edu/draayerpubs/Conference Proceedings/Time-Space Optimal Numerical Database for Large-Scale Scientific Applications.pdf},
  year         = {1990},
}

@misc{wstree,
  author = {Park, S. C. and Draayer, J. P. and Zheng, S. Q. and Bahri, C.},
  title  = {{WSTREE}},
  url    = {http://cpc.cs.qub.ac.uk/summaries/ACTZ{\_}v1{\_}0.html},
  year   = {1994},
}

